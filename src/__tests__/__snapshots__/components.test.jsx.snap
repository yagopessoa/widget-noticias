// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddressForm styled components test should render Button correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-ifAKCX",
        "isStatic": false,
        "rules": Array [
          "
  padding: 8px 16px;
  width: fit-content;
  margin: 8px 2px;
  background: #009DFF;
  border-radius: 4px;
  text-align: center;
  font: Bold 18px/22px Roboto;
  color: #FFFFFF;
  border: none;
  cursor: pointer;
  :focus {
    outline: 0;
  }
  :active{
    background: #4FBBFF;
  }

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.button",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-ifAKCX",
      "target": "button",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Card correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bxivhb",
        "isStatic": false,
        "rules": Array [
          "
  background: #FFFFFF;
  border: 1px solid #E6E6E6;
  margin: 48px 0px;
  padding: 55px 70px;
  width: 50%;
  display: flex;
  flex-direction: column;

  @media(max-width: 1144px) {
    width: 75%;
  }

  @media(max-width: 768px) {
    width: calc(100% - 174px);
    margin: 16px;
  }
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bxivhb",
      "target": "div",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Divider correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bZQynM",
        "isStatic": false,
        "rules": Array [
          "
  height: 0px;
  width: 100%;
  background: #D8D8D8;
  border: 1px solid #A4A4A4;
  border-radius: 4px;
  margin: 16px 0px;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bZQynM",
      "target": "div",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Label correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-EHOje",
        "isStatic": false,
        "rules": Array [
          "
  font: 400 20px/24px Roboto;
  padding: 0px 38px;
  margin: 0px 16px;
  background: #D8D8E4;
  border-radius: 4px;
  color: #FFF;
  width: fit-content;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-EHOje",
      "target": "div",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Row correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-gzVnrw",
        "isStatic": false,
        "rules": Array [
          "
  display: flex;
  align-items: center;

  @media(max-width: 768px) {
    flex-direction: column;
  }

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-gzVnrw",
      "target": "div",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Select correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htoDjs",
        "isStatic": false,
        "rules": Array [
          "
  font: 400 20px/24px Roboto;
  color: #A4A4A4;
  width: fit-content;
  margin: 8px 2px;
  background-color: white;
  border: none;
  cursor: pointer;

  :focus {
    outline: 0;
  }

  :after {
    color: #009DFF;
    width: 0; 
    height: 0;
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-top: 20px solid #f00; 

    ",
          [Function],
          ";
  }
",
        ],
      },
      "displayName": "styled.select",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htoDjs",
      "target": "select",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  <option
    value=""
  >
    Filtrar por fonte
  </option>
  <option
    value="Opção 1"
  >
    Opção 1
  </option>
  <option
    value="Opção 2"
  >
    Opção 2
  </option>
  <option
    value="Opção 3s"
  >
    Opção 3
  </option>
</StyledComponent>
`;

exports[`AddressForm styled components test should render Subtitle correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bwzfXH",
        "isStatic": false,
        "rules": Array [
          "
  font: 600 24px/29px Roboto;
  color: #4E4E4E;
  width: fit-content;
  margin: 16px 2px;
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bwzfXH",
      "target": "div",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Text correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htpNat",
        "isStatic": false,
        "rules": Array [
          "
  font: 400 20px/24px Roboto;
  color: #A4A4A4;
  width: fit-content;
  margin: 8px 2px;

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htpNat",
      "target": "div",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;

exports[`AddressForm styled components test should render Title correctly 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": false,
        "rules": Array [
          "
  font: 600 32px/38px Roboto;
  color: #009DFF;
  padding: 8px 2px;
  border-bottom: 5px solid #009DFF;
  border-radius: 4px;
  width: fit-content;
  margin: 8px 2px;
",
        ],
      },
      "displayName": "styled.p",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": "p",
      "toString": [Function],
      "usesTheme": false,
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
>
  mock
</StyledComponent>
`;
